import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar


buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
        maven {
            name = 'sonatype'
            url = 'https://oss.sonatype.org/content/repositories/snapshots/'
        }
    }
    // This is only here while FG is under active development
    configurations.classpath {
        resolutionStrategy {
            cacheDynamicVersionsFor 10, 'seconds'
            cacheChangingModulesFor 0, 'seconds'
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.+"
    }
}

plugins {
    id 'java'
    id 'idea'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'
apply plugin: 'kotlin'

//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
idea {
    module {
        inheritOutputDirs = true
        //Exclude directories from being managed
        for (String excludeDirName in ["run", "out", "logs", "gradle"]) {
            File excludeDir = new File(projectDir, excludeDirName)
            excludeDirs.add(excludeDir)
        }
    }
}

version = "${mc_version}-${mod_version}"
group = "com.tencao" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "saoui"

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users, so your mod should target Java 8.

sourceSets {
    api
    main {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
        resources {
            srcDir 'src/generated/resources'
        }
    }
    test {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
}

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // Channel:   Version:
    // snapshot   YYYYMMDD   Snapshot are built nightly.
    // stable     #          Stables are built at the discretion of the MCP team.
    // official   MCVersion  Official field/method names from Mojang mapping files
    //
    // You must be aware of the Mojang license when using the 'official' mappings.
    // See more information here: https://github.com/MinecraftForge/MCPConfig/blob/master/Mojang.md
    //
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    //mappings channel: 'snapshot', version: '20180713-1.12'
    mappings channel: 'snapshot', version: '20171007-1.12'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')


    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                saoui {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            // The markers can be changed as needed.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                saoui {
                    source sourceSets.main
                }
            }
        }
    }

}

// This is only here while FG is under active development
configurations.all  {
    resolutionStrategy {
        cacheDynamicVersionsFor 10, 'seconds'
        cacheChangingModulesFor 0, 'seconds'
    }
}

configurations {
    shadow  {
        transitive = false
    }
    implementation.extendsFrom shadow
    apiImplementation.extendsFrom(implementation)
    apiRuntimeOnly.extendsFrom(runtimeOnly)
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    jcenter()
    mavenCentral()
    mavenLocal()
    maven { //MinecraftForge
        name "MinecraftForge Maven"
        url "http://files.minecraftforge.net/maven/"
    }
    maven {
        name = "TCons & Mantle"
        url = "http://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name 'Forgelin'
        url "http://maven.shadowfacts.net/"
    }
    maven {
        name 'Bluexin'
        url "http://maven.bluexin.be/repository/releases/"
    }
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'
    //minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2855'

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    compile "net.shadowfacts:Forgelin:${forgelin_version}"
    implementation fg.deobf('com.tencao:saomclib:1.12.2+') {changing = true}
    //compile 'be.bluexin.gnu.jel:gnu-jel:2.1.3'
    shadow 'be.bluexin.gnu.jel:gnu-jel:2.1.3'
    shadow 'com.helger:ph-css:6.5.0'
    shadow 'com.helger.commons:ph-commons:10.1.6'
    shadow 'org.slf4j:slf4j-api:1.7.36'
    //compile 'com.helger:ph-css:6.1.1'
} // TODO: move to new shadow system so it doesn't break dependency info

javadoc {
    source = [sourceSets.main.allJava, sourceSets.api.allJava]
    // prevent java 8's strict doclint for javadocs from failing builds
    options.addStringOption('Xdoclint:none', '-quiet')
}

jar {
    for (dep in configurations.shadow) {
        from(project.zipTree(dep)) {
            exclude 'META-INF/MANIFEST.MF'
        }
    }

    manifest.attributes([
            "Specification-Title"     : "SAOUI",
            "Specification-Vendor"    : "Tencao, Bluexin",
            "Specification-Version"   : "1", // We are version 1 of ourselves
            "Implementation-Title"    : project.name,
            "Implementation-Version"  : project.version,
            "Implementation-Vendor"   : "Tencao, Bluexin",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ])

    finalizedBy 'reobfJar'

}


tasks.withType(Copy) {
    includeEmptyDirs = false
}

task sourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
    from sourceSets.api.allSource
}

task deobfJar(type: Jar) {
    archiveClassifier.set('deobf')
    from sourceSets.main.output
    from sourceSets.api.output
}

task shadeJar(type: ShadowJar) {
    from sourceSets.main.output
    configurations = [project.configurations.shadow]

    //relocate 'gnu.jel', 'saoui.shade.gnu.jel'
    relocate 'com.helger', 'saoui.shade.com.helger'
    relocate 'org.slf4j', 'saoui.shade.org.slf4j'
    finalizedBy 'reobfJar'
}

artifacts {
    archives deobfJar
    archives sourcesJar
    archives shadeJar
}

task reobf {
    dependsOn 'reobfJar'
}

java {
    withSourcesJar()
}

jar.finalizedBy('reobfJar')
tasks.build.dependsOn('shadeJar')
tasks.idea.dependsOn('shadeJar')
publish.dependsOn('reobfJar', 'deobfJar', 'sourcesJar', 'shadeJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }

    repositories {
        def remote = System.getenv('REPO_PWD') != null
        maven {
            def remoteURL = "https://maven.tencao.com/repository/" + (((String) project.version).contains("SNAPSHOT")? "snapshots": "repo-for-releases")
            def localURL = "file://${buildDir}/repo"
            url = remote? remoteURL: localURL
            if (remote) {
                credentials(PasswordCredentials) {
                    username = 'CI'
                    password = System.getenv('REPO_PWD')
                }
            }
        }
    }
}

compileKotlin {
    kotlinOptions {
        javaParameters = true
        jvmTarget = 1.8
    }
}

tasks.withType(JavaCompile) {
    options.incremental = false
}

def replaceResources = tasks.register("replaceResources", Copy) {
    it.outputs.upToDateWhen { false }
    //Copy it into the build dir
    it.from(sourceSets.main.resources) {
    }
    it.into "$buildDir/resources/main/"
}

processResources {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    exclude('META-INF/mods.toml')
    configure { finalizedBy(replaceResources) }
}

classes.configure {
    dependsOn(replaceResources)
}