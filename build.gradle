buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.+', changing: true
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.4.20"
    }
}

plugins {
    id 'java'
    id 'idea'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: "maven"
apply plugin: 'kotlin'

//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
idea {
    module {
        //Exclude directories from being managed
        for (String excludeDirName in ["run", "out", "logs", "gradle"]) {
            File excludeDir = new File(projectDir, excludeDirName)
            excludeDirs.add(excludeDir)
        }
    }
}

group = 'com.saomc'
version = mc_version + '-' + mod_version
archivesBaseName = 'saoui'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: '20210309-1.16.5'
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                saoui {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                saoui {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'saoui', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                saoui {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    jcenter()
    mavenCentral()
    maven {
        url "https://maven.bluexin.be/repository/releases/"
    }
    maven {
        url "https://maven.bluexin.be/repository/snapshots/"
    }
    maven {
        name = 'kotlinforforge'
        url = 'https://thedarkcolour.github.io/KotlinForForge/'
    }
    maven {
        name = 'LibrarianLib'
        url = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
    }
    flatDir name: 'libs', dirs: 'libs'
}

configurations {
    shade
    compile.extendsFrom shade
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.1.32'
    implementation 'thedarkcolour:kotlinforforge:1.7.0'
    implementation 'com.teamwizardry.librarianlib:core:1.16-dev+'
    implementation 'com.teamwizardry.librarianlib:facade:1.16-dev+'
    implementation 'com.teamwizardry.librarianlib:etcetera:1.16-dev+'
    compile 'com.ibm.icu:icu4j:63.1'
    shade 'be.bluexin.gnu.jel:gnu-jel:2.1.3'
    compile 'be.bluexin.gnu.jel:gnu-jel:2.1.3'
    shade 'com.helger:ph-css:6.1.1'
    compile 'com.helger:ph-css:6.1.1'
    compile fileTree(dir: 'libs', include: ['*.jar'])
}

uploadArchives {
    if (System.getenv('REPO_PWD') != null) {
        repositories.mavenDeployer {
            repository(url: "http://maven.bluexin.be/repository/" + (((String) project.version).contains("SNAPSHOT")? "snapshots": "releases") + "/") {
                authentication(userName: "CI", password: System.getenv('REPO_PWD'))
            }
        }
    } else {
        println("No password set up! Uploading to local.")
        repositories.mavenDeployer {
            repository(url: "file://$buildDir/repo")
        }
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    for (dep in configurations.shade) {
        from(project.zipTree(dep)) {
            exclude 'META-INF/MANIFEST.MF'
        }
    }
    manifest {
        attributes([
                "Specification-Title"     : "saoui",
                //"Specification-Vendor": "saoui authors",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                //"Implementation-Vendor": "saoui authors",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

tasks.withType(Copy) {
    includeEmptyDirs = false
}

jar.finalizedBy('reobfJar')
